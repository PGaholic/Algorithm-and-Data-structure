Java网络编程

1、定义发送端

class UdpSend
{
        public static void main(String[] args) throws Exception
        {
                //1、创建UDP服务，通过DatagramSocket对象
                DatagramSocket ds = new DatagramSocket();   //若指定发送端口使用DatagramSocket ds = new DatagramSocket(8888);否则每次发送端
                                                            //端口都是由系统随机分配的
                
                //2、确定数据，并封装成数据包。DatagramPacket(byte[] buf, int length, InetAddress address,int port)
                byte[] buf = "udp ge men lai le".getBytes();
                DatagramPacket dp = new DatagramPacket(buf,buf.length,InetAddress.getByName("192.168.1.254"),10000);//将数据发送到IP为192.168.1.254的主机上
                                                                                                                    //并指定接收端口为10000
                //3、通过socket服务，将已有的数据包发送出去，通过send方法
                ds.send(dp);
                
                //4、关闭资源
                ds.close();
        }
}  

2、定义接受端
/*注意：这是两个独立的应用程序，应该写在不同的class文件中，且都应该带主函数
需求：定义一个应用程序，用于接收UDP协议传输的数据并处理的

思路：
1、定义UDPSocket服务。通常会监听一个端口，其实就是给这个接收网络应用程序定义数字标识，方便于明确哪些数据过来该应用程序可以处理。
2、定义一个数据包(刚开始数据包是空的),用于存储接受到的字节数据。因为数据包对象中有更多的功能可以提取字节数据中的不同数据信息
3、通过Socket服务的receive方法将接收到的数据存入已经定义好的数据包中。
4、通过数据包对象的特有功能，将这些不同的数据取出。打印在控制台上。
*/

class UdpRece
{
        public static void main(String[]  args) throws Exception
        {
                //1、创建UDP Socket，建立端点。
                DatagramSocket ds = new DatagramSocket(10000);   //指定该接收端监听10000端口，也可以理解为该接收端有一个10000的数字标识，用于发送端识别
                while(true)
                {       //循环重复信息
                        //2、定义数据包，用来存储接收到的数据。
                        DatagramPacket dp = new DatagramPacket(buf,buf.length);

                        //3、通过服务的receive方法将收到数据存入数据包中。
                        ds.receive(dp);  //阻塞式方法，没有接收到数据就等待

                        //4、通过数据包DatagramPacket提供的方法获取其中的数据
                        String ip = dp.getAddress().getHostAddress();
                        String data = new String(dp.getData(),0,dp.getLength());    //获取buf中有效长度的数据，如果不指定，则返回1024所有的字符数组，很多为空字符
                        int port = dp.getPort();
                        System.out.println(ip+"::"+data+"::"+port);
                }
                //5、关闭资源
                ds.close();
}

//注意：有时候会出现java.net.BindException接口绑定异常，要使用的接口已经被使用或者该端口虽然已经结束使用但是还没有被释放
